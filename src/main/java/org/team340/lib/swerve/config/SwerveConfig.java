package org.team340.lib.swerve.config;

import com.ctre.phoenix6.CANBus;
import edu.wpi.first.math.VecBuilder;
import edu.wpi.first.math.Vector;
import edu.wpi.first.math.numbers.N3;
import java.util.ArrayList;
import java.util.List;
import org.team340.lib.swerve.SwerveAPI;
import org.team340.lib.swerve.hardware.SwerveIMUs;
import org.team340.lib.swerve.hardware.SwerveIMUs.SwerveIMU;

/**
 * Config builder for the {@link SwerveAPI}.
 */
public class SwerveConfig {

    /** The robot's main loop period in seconds. */
    public double period = -1.0;
    /** The period to update odometry in seconds. */
    public double odometryPeriod = -1.0;
    /** The period to look ahead for discretizing chassis speeds in seconds. */
    public double discretizationPeriod = -1.0;
    /** The default frame period for unused CAN signals in seconds. */
    public double defaultFramePeriod = -1.0;
    /** PID gains for move motors, as a tuple of {@code [kP, kI, kD]}. */
    public double[] movePID;
    /** Feed forward gains for move motors, as a tuple of {@code [kS, kV]}. */
    public double[] moveFF;
    /** PID gains for turn motors, as a tuple of {@code [kP, kI, kD]}. */
    public double[] turnPID;
    /** If the move motors should have brake mode enabled. */
    public boolean moveBrakeMode = false;
    /** If the turn motors should have brake mode enabled. */
    public boolean turnBrakeMode = false;
    /** The maximum forward velocity the robot is capable of in meters/second. */
    public double velocity = -1.0;
    /** The minimum velocity required for a swerve module to accept a commanded output. */
    public double velDeadband = -1.0;
    /** The maximum acceleration the robot is capable of relevant to carpet slip in meters/second/second. */
    public double slipAccel = -1.0;
    /** The maximum acceleration the robot is capable of relevant to motor torque in meters/second/second. */
    public double torqueAccel = -1.0;
    /** The maximum angular acceleration the robot is capable of in radians/second/second. */
    public double angularAccel = -1.0;
    /** The maximum velocity for driver input in meters/second. */
    public double driverVel = -1.0;
    /** Exponential power to apply to driver velocity input. */
    public double driverVelExp = -1.0;
    /** Deadband to apply to driver velocity input. */
    public double driverVelDeadband = -1.0;
    /** The maximum angular velocity for driver input in radians/second. */
    public double driverAngularVel = -1.0;
    /** Exponential power to apply to driver angular velocity input. */
    public double driverAngularVelExp = -1.0;
    /** Deadband to apply to driver angular velocity input. */
    public double driverAngularVelDeadband = -1.0;
    /** The robot's nominal voltage. Typically {@code 12.0}. */
    public double voltage = -1.0;
    /** The stator current limit in amps for move motors. */
    public double moveStatorLimit = -1.0;
    /** The supply current limit in amps for move motors. */
    public double moveSupplyLimit = -1.0;
    /** The stator current limit in amps for turn motors. */
    public double turnStatorLimit = -1.0;
    /** The supply current limit in amps for turn motors. */
    public double turnSupplyLimit = -1.0;
    /** The move gear ratio, in motor rotations/wheel rotation. */
    public double moveGearRatio = -1.0;
    /** The turn gear ratio, in motor rotations/module rotation. */
    public double turnGearRatio = -1.0;
    /** The ratio between the wheel and the module's angle. */
    public double couplingRatio = -1.0;
    /** The wheel diameter in meters. */
    public double wheelDiameter = -1.0;
    /** Standard deviations for odometry. */
    public Vector<N3> odometryStdDevs;
    /** The IMU to use, generated by the {@link SwerveIMUs} class. */
    public SwerveIMU.Ctor imu;
    /** The CAN bus utilized by Phoenix devices. */
    public CANBus phoenixCanBus = new CANBus();
    /** {@code true} if Phoenix Pro is active on <i>all</i> devices used by the swerve API. */
    public boolean phoenixPro = false;
    /** If move motors should enable FOC. */
    public boolean phoenixMoveFOC = false;
    /** If turn motors should enable FOC. */
    public boolean phoenixTurnFOC = false;
    /** Configurations for swerve modules. */
    public SwerveModuleConfig[] modules;

    /**
     * Sets various timings utilized by the robot.
     * @param period The robot's main loop period in seconds.
     * @param odometry The period to update odometry in seconds.
     * @param discretization The period to look ahead for discretizing chassis speeds in seconds.
     * @param defaultFramePeriod The default frame period for unused CAN signals in seconds.
     */
    public SwerveConfig setTimings(double period, double odometry, double discretization, double defaultFramePeriod) {
        this.period = period;
        odometryPeriod = odometry;
        discretizationPeriod = discretization;
        this.defaultFramePeriod = defaultFramePeriod;
        return this;
    }

    /**
     * Sets PID gains for move motors.
     * @param kP Proportional gain constant.
     * @param kI Integral gain constant.
     * @param kD Derivative gain constant.
     */
    public SwerveConfig setMovePID(double kP, double kI, double kD) {
        movePID = new double[] { kP, kI, kD };
        return this;
    }

    /**
     * Sets feed forward constants for move motors. A good starting point is a {@code kV}
     * value of {@code <Optimal Voltage> / <Max Velocity>}. These values can be obtained
     * via characterization using sysID with a real robot.
     * @param kS The static gain.
     * @param kV The velocity gain.
     */
    public SwerveConfig setMoveFF(double kS, double kV) {
        moveFF = new double[] { kS, kV };
        return this;
    }

    /**
     * Sets PID gains for turn motors.
     * @param kP Proportional gain constant.
     * @param kI Integral gain constant.
     * @param kD Derivative gain constant.
     */
    public SwerveConfig setTurnPID(double kP, double kI, double kD) {
        this.turnPID = new double[] { kP, kI, kD };
        return this;
    }

    /**
     * Sets motor brake modes.
     * @param move If the move motors should have brake mode enabled.
     * @param turn If the turn motors should have brake mode enabled.
     */
    public SwerveConfig setBrakeMode(boolean move, boolean turn) {
        moveBrakeMode = move;
        turnBrakeMode = turn;
        return this;
    }

    /**
     * Sets limits for the drivetrain.
     *
     * <br><br>
     * You may find more predictable behavior by setting these values slightly lower than the actual maximum capabilities of your robot.
     * It is recommended that these values are found empirically using an actual robot. An easy way to do so is to configure infeasible limits, then analyze telemetry.
     *
     * @param velocity The maximum forward velocity the robot is capable of in meters/second. More specifically, the maximum velocity a move motor is capable of.
     * @param velDeadband The minimum velocity required for a swerve module to accept a commanded output.
     * @param slipAccel The maximum acceleration the robot is capable of relevant to carpet slip in meters/second/second.
     * @param torqueAccel The maximum acceleration the robot is capable of relevant to motor torque in meters/second/second.
     * @param angularAccel The maximum angular acceleration the robot is capable of in radians/second/second.
     */
    public SwerveConfig setLimits(
        double velocity,
        double velDeadband,
        double slipAccel,
        double torqueAccel,
        double angularAccel
    ) {
        this.velocity = velocity;
        this.velDeadband = velDeadband;
        this.slipAccel = slipAccel;
        this.torqueAccel = torqueAccel;
        this.angularAccel = angularAccel;
        return this;
    }

    /**
     * Configures the profile to apply to speeds calculated using the driver's controller input.
     * @param vel The maximum velocity for driver input in meters/second.
     * @param velExp Exponential power to apply to driver velocity input. {@code 1.0} effectively disables.
     * @param velDeadband Deadband to apply to driver velocity input. {@code 0.0} effectively disables.
     * @param angularVel The maximum angular velocity for driver input in radians/second.
     * @param angularVelExp Exponential power to apply to driver angular velocity input. {@code 1.0} effectively disables.
     * @param angularVelDeadband Deadband to apply to driver angular velocity input. {@code 0.0} effectively disables.
     */
    public SwerveConfig setDriverProfile(
        double vel,
        double velExp,
        double velDeadband,
        double angularVel,
        double angularVelExp,
        double angularVelDeadband
    ) {
        driverVel = vel;
        driverVelExp = velExp;
        driverVelDeadband = velDeadband;
        driverAngularVel = angularVel;
        driverAngularVelExp = angularVelExp;
        driverAngularVelDeadband = angularVelDeadband;
        return this;
    }

    /**
     * Sets power properties.
     * @param voltage The robot's nominal voltage. Typically {@code 12.0}.
     * @param moveStatorLimit The stator current limit in amps for move motors.
     * @param moveSupplyLimit The supply current limit in amps for move motors. Note that this value is ignored for REV devices.
     * @param turnStatorLimit The stator current limit in amps for turn motors.
     * @param turnSupplyLimit The supply current limit in amps for turn motors. Note that this value is ignored for REV devices.
     */
    public SwerveConfig setPowerProperties(
        double voltage,
        double moveStatorLimit,
        double moveSupplyLimit,
        double turnStatorLimit,
        double turnSupplyLimit
    ) {
        this.voltage = voltage;
        this.moveStatorLimit = moveStatorLimit;
        this.moveSupplyLimit = moveSupplyLimit;
        this.turnStatorLimit = turnStatorLimit;
        this.turnSupplyLimit = turnSupplyLimit;
        return this;
    }

    /**
     * Sets swerve gearing properties.
     * @param moveRatio The move gear ratio, in motor rotations/wheel rotation.
     * @param turnRatio The turn gear ratio, in motor rotations/module rotation.
     * @param couplingRatio The ratio between the wheel and the module's angle. Used as a compensation factor for odometry, set to {@code 0.0} to disable.
     * @param wheelDiameter The wheel diameter in meters.
     */
    public SwerveConfig setMechanicalProperties(
        double moveRatio,
        double turnRatio,
        double couplingRatio,
        double wheelDiameter
    ) {
        moveGearRatio = moveRatio;
        turnGearRatio = turnRatio;
        this.couplingRatio = couplingRatio;
        this.wheelDiameter = wheelDiameter;
        return this;
    }

    /**
     * Sets the standard deviations for pose estimation from module odometry.
     * @param x The X axis standard deviation in meters.
     * @param y The Y axis standard deviation in meters.
     * @param angular The angular standard deviation in radians.
     */
    public SwerveConfig setOdometryStd(double x, double y, double angular) {
        this.odometryStdDevs = VecBuilder.fill(x, y, angular);
        return this;
    }

    /**
     * Sets the IMU to use.
     * @param imu The IMU to use, generated by the {@link SwerveIMUs} class.
     */
    public SwerveConfig setIMU(SwerveIMU.Ctor imu) {
        this.imu = imu;
        return this;
    }

    /**
     * Sets available features for Phoenix devices. For Phoenix Pro features to be utilized by the Swerve API,
     * all devices must be activated, and intrinsically must all be Phoenix devices (Pigeon2 + TalonFX + CANcoder).
     * This configuration option can be omitted safely if its features are not needed.
     * @param canBus The CAN bus utilized by Phoenix devices.
     * @param pro {@code true} if Phoenix Pro is active on <i>all</i> CTRE devices used by the swerve API.
     * @param moveFOC If move motors should enable FOC. {@code pro} can still be {@code false} while enabling FOC, provided all move motors are still licensed.
     * @param turnFOC If turn motors should enable FOC. {@code pro} can still be {@code false} while enabling FOC, provided all turn motors are still licensed.
     */
    public SwerveConfig setPhoenixFeatures(CANBus canBus, boolean pro, boolean moveFOC, boolean turnFOC) {
        phoenixCanBus = canBus;
        phoenixPro = pro;
        phoenixMoveFOC = moveFOC;
        phoenixTurnFOC = turnFOC;
        return this;
    }

    /**
     * Sets module configs.
     * See {@link SwerveModuleConfig}.
     * @param modules The configs of the swerve modules.
     */
    public SwerveConfig setModules(SwerveModuleConfig... modules) {
        this.modules = modules;
        return this;
    }

    /**
     * Verifies the config as well as the config's modules.
     * Throws an error if an issue is found.
     */
    public void verify() {
        List<String> missing = new ArrayList<>();
        if (period == -1.0) missing.add("Period");
        if (odometryPeriod == -1.0) missing.add("Odometry Period");
        if (discretizationPeriod == -1.0) missing.add("Discretization Period");
        if (defaultFramePeriod == -1.0) missing.add("Default Frame Period");
        if (movePID == null) missing.add("Move PID");
        if (moveFF == null) missing.add("Move FF");
        if (turnPID == null) missing.add("Turn PID");
        if (velocity == -1.0) missing.add("Velocity");
        if (velDeadband == -1.0) missing.add("Velocity Deadband");
        if (slipAccel == -1.0) missing.add("Slip Acceleration");
        if (torqueAccel == -1.0) missing.add("Torque Acceleration");
        if (angularAccel == -1.0) missing.add("Angular Acceleration");
        if (driverVel == -1.0) missing.add("Driver Velocity");
        if (driverVelExp == -1.0) missing.add("Driver Velocity Exponential");
        if (driverVelDeadband == -1.0) missing.add("Driver Velocity Deadband");
        if (driverAngularVel == -1.0) missing.add("Driver Angular Velocity");
        if (driverAngularVelExp == -1.0) missing.add("Driver Angular Velocity Exponential");
        if (driverAngularVelDeadband == -1.0) missing.add("Driver Angular Velocity Deadband");
        if (voltage == -1.0) missing.add("Voltage");
        if (moveStatorLimit == -1.0) missing.add("Move Stator Current Limit");
        if (moveSupplyLimit == -1.0) missing.add("Move Supply Current Limit");
        if (turnStatorLimit == -1.0) missing.add("Turn Stator Current Limit");
        if (turnSupplyLimit == -1.0) missing.add("Turn Supply Current Limit");
        if (moveGearRatio == -1.0) missing.add("Move Gear Ratio");
        if (turnGearRatio == -1.0) missing.add("Turn Gear Ratio");
        if (couplingRatio == -1.0) missing.add("Coupling Ratio");
        if (wheelDiameter == -1.0) missing.add("Wheel Diameter");
        if (odometryStdDevs == null) missing.add("Odometry Standard Deviations");
        if (imu == null) missing.add("IMU");
        if (modules == null) missing.add("Modules");

        if (!missing.isEmpty()) {
            throw new IllegalArgumentException("SwerveConfig missing values: " + String.join(", ", missing));
        }

        for (SwerveModuleConfig module : modules) {
            module.verify();
        }
    }
}
