package org.team340.lib.swerve.config;

import edu.wpi.first.math.geometry.Translation2d;
import java.util.ArrayList;
import java.util.List;
import org.team340.lib.swerve.SwerveAPI;
import org.team340.lib.swerve.hardware.SwerveEncoders;
import org.team340.lib.swerve.hardware.SwerveEncoders.SwerveEncoder;
import org.team340.lib.swerve.hardware.SwerveMotors;
import org.team340.lib.swerve.hardware.SwerveMotors.SwerveMotor;

/**
 * Config builder for {@link SwerveAPI} modules.
 */
public class SwerveModuleConfig {

    /** The name of the module. */
    public String name;
    /** The module's location relative to the center of the robot. */
    public Translation2d location;
    /** The move motor to use, generated by the {@link SwerveMotors} class. */
    public SwerveMotor.Ctor moveMotor;
    /** The turn motor to use, generated by the {@link SwerveMotors} class. */
    public SwerveMotor.Ctor turnMotor;
    /** The encoder to use, generated by the {@link SwerveEncoders} class. */
    public SwerveEncoder.Ctor encoder;

    /**
     * Sets the module's name. Utilized by telemetry.
     * @param name The name of the module.
     */
    public SwerveModuleConfig setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Sets the module's location relative to the center of the robot (in meters).
     * @param x The module's X location in meters.
     * @param y The module's Y location in meters.
     */
    public SwerveModuleConfig setLocation(double x, double y) {
        location = new Translation2d(x, y);
        return this;
    }

    /**
     * Sets the move motor to use.
     * @param motor The move motor to use, generated by the {@link SwerveMotors} class.
     */
    public SwerveModuleConfig setMoveMotor(SwerveMotor.Ctor motor) {
        moveMotor = motor;
        return this;
    }

    /**
     * Sets the turn motor to use.
     * @param motor The turn motor to use, generated by the {@link SwerveMotors} class.
     */
    public SwerveModuleConfig setTurnMotor(SwerveMotor.Ctor motor) {
        turnMotor = motor;
        return this;
    }

    /**
     * Sets the encoder to use.
     * @param encoder The encoder to use, generated by the {@link SwerveEncoders} class.
     */
    public SwerveModuleConfig setEncoder(SwerveEncoder.Ctor encoder) {
        this.encoder = encoder;
        return this;
    }

    /**
     * Verifies the config.
     */
    public void verify() {
        var missing = missing();
        if (!missing.isEmpty()) {
            throw new IllegalStateException("SwerveModuleConfig missing values: " + String.join(", ", missing));
        }
    }

    /**
     * Collects a list of missing elements.
     */
    List<String> missing() {
        List<String> missing = new ArrayList<>();
        if (name == null) missing.add("Name");
        if (location == null) missing.add("Location");
        if (moveMotor == null) missing.add("Move Motor");
        if (turnMotor == null) missing.add("Turn Motor");
        if (encoder == null) missing.add("Encoder");

        return missing;
    }
}
