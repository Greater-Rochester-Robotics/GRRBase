package org.team340.lib.swerve.config;

import edu.wpi.first.math.geometry.Translation2d;
import java.util.MissingResourceException;
import org.team340.lib.swerve.hardware.SwerveEncoders.SwerveEncoder;
import org.team340.lib.swerve.hardware.SwerveMotors.SwerveMotor;

/**
 * Config builder for {@link SwerveBase} modules.
 */
public class SwerveModuleConfig {

    private String name;
    private Translation2d location;
    private SwerveMotor.Ctor moveMotor;
    private SwerveMotor.Ctor turnMotor;
    private SwerveEncoder.Ctor encoder;

    /**
     * Sets the module's name. Utilized by telemetry.
     * @param name The name to use.
     */
    public SwerveModuleConfig setName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Gets the configured name.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the module's location relative to the center of the robot (in meters).
     * @param x The module's X location in meters.
     * @param y The module's Y location in meters.
     */
    public SwerveModuleConfig setLocation(double x, double y) {
        location = new Translation2d(x, y);
        return this;
    }

    /**
     * Gets the module's configured location.
     */
    public Translation2d getLocation() {
        return location;
    }

    /**
     * Sets the move motor to use.
     * @param motor The move motor to use, generated by the {@link SwerveMotors} class.
     */
    public SwerveModuleConfig setMoveMotor(SwerveMotor.Ctor motor) {
        moveMotor = motor;
        return this;
    }

    /**
     * Gets the configured move motor constructor.
     */
    public SwerveMotor.Ctor getMoveMotor() {
        return moveMotor;
    }

    /**
     * Sets the turn motor to use.
     * @param motor The turn motor to use, generated by the {@link SwerveMotors} class.
     */
    public SwerveModuleConfig setTurnMotor(SwerveMotor.Ctor motor) {
        turnMotor = motor;
        return this;
    }

    /**
     * Gets the configured turn motor constructor.
     */
    public SwerveMotor.Ctor getTurnMotor() {
        return turnMotor;
    }

    /**
     * Sets the encoder to use.
     * @param encoder The encoder to use, generated by the {@link SwerveEncoders} class.
     */
    public SwerveModuleConfig setEncoder(SwerveEncoder.Ctor encoder) {
        this.encoder = encoder;
        return this;
    }

    /**
     * Gets the configured encoder constructor.
     */
    public SwerveEncoder.Ctor getEncoder() {
        return encoder;
    }

    /**
     * Verifies the config.
     */
    public void verify() {
        if (name == null) throwMissing("Name");
        if (location == null) throwMissing("Position");
        if (moveMotor == null) throwMissing("Move Motor");
        if (turnMotor == null) throwMissing("Turn Motor");
        if (encoder == null) throwMissing("Encoder");
    }

    private void throwMissing(String key) {
        throw new MissingResourceException("Missing value", this.getClass().getSimpleName(), key);
    }
}
